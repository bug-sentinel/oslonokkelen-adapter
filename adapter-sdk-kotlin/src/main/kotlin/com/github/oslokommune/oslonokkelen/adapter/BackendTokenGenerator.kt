package com.github.oslokommune.oslonokkelen.adapter

import com.nimbusds.jose.JWSAlgorithm
import com.nimbusds.jose.JWSHeader
import com.nimbusds.jose.crypto.ECDSASigner
import com.nimbusds.jose.jwk.Curve
import com.nimbusds.jose.jwk.ECKey
import com.nimbusds.jose.jwk.KeyOperation
import com.nimbusds.jose.jwk.KeyUse
import com.nimbusds.jose.jwk.gen.ECKeyGenerator
import com.nimbusds.jwt.JWTClaimsSet
import com.nimbusds.jwt.SignedJWT
import java.net.URI
import java.time.Duration
import java.time.Instant
import java.util.Date
import java.util.UUID

/**
 * This class can be used to simulate tokens / requests generated by OslonÃ¸kkelen.
 * Useful for testing your adapter implementation.
 */
class BackendTokenGenerator(
    private val key: ECKey,
    private val oslonokkelenBackendUri: URI,
    private val tokenExpireTime: Duration = Duration.ofSeconds(60),
    private val timestamper: () -> Instant = { Instant.now() },
    private val jwtIdGenerator: () -> String = { UUID.randomUUID().toString() }
) {


    fun createManifestScrapeToken(remoteUri: URI): SignedJWT {
        return buildToken {
            audience("${remoteUri.scheme}://${remoteUri.host}")
            issuer("${oslonokkelenBackendUri.scheme}://${oslonokkelenBackendUri.host}")
            jwtID(jwtIdGenerator())
            claim("scope", listOf("manifest:scrape"))
        }
    }

    fun buildToken(builderBlock: JWTClaimsSet.Builder.() -> Unit): SignedJWT {
        val claims = createTokenClaims(builderBlock)
        val header = createTokenHeader()
        return signToken(header, claims)
    }

    private fun createTokenClaims(claimsBuilderBlock: JWTClaimsSet.Builder.() -> Unit): JWTClaimsSet {
        val currentTimestamp = timestamper()
        val claimsBuilder = JWTClaimsSet.Builder()
        claimsBuilder.expirationTime(Date.from(currentTimestamp.plus(tokenExpireTime)))
        claimsBuilder.issueTime(Date.from(currentTimestamp))
        claimsBuilderBlock(claimsBuilder)

        return claimsBuilder.build()
    }

    private fun createTokenHeader(): JWSHeader {
        val headerBuilder = JWSHeader.Builder(JWSAlgorithm.ES256)
        val publicKey = key.toPublicJWK()
        headerBuilder.keyID(publicKey.keyID)
        return headerBuilder.build()
    }

    private fun signToken(header: JWSHeader?, claims: JWTClaimsSet): SignedJWT {
        val signedJWT = SignedJWT(header, claims)
        signedJWT.sign(ECDSASigner(key))
        return signedJWT
    }


    companion object {

        private val generator = ECKeyGenerator(Curve.P_256)
            .keyOperations(setOf(KeyOperation.SIGN, KeyOperation.VERIFY))
            .keyUse(KeyUse.SIGNATURE)

        fun generateKeyPair(keyId: String? = null): ECKey {
            return if (keyId != null) {
                generator.keyID(keyId).generate()
            } else {
                generator.keyIDFromThumbprint(true).generate()
            }
        }

    }

}